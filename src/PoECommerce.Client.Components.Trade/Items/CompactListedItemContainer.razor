@using System.Text.RegularExpressions
@using PoECommerce.Core.Model.Trade
@inherits CompactListedItemContainerBase

    <div class="compact-listed-item-container">
        <div class="cell">
            <Button Value="PM" OnClick="@InvokeInstantWhisper" ElementType="@ElementType.Secondary"></Button>
        </div>

        <div class="cell" style="width: 17%;">@ListedItem.Listing.Price.Amount @ListedItem.Listing.Price.Currency</div>

        <div class="cell" style="width: 23%;" title="@(ListedItem.Listing.Account.LastCharacterName)">
            @(ListedItem.Listing.Account.LastCharacterName)
        </div>

        <div class="cell" style="width: 40%;">
            @{
                if (ListedItem.Item.ItemType == ItemType.Gem)
                {
                    string level = ListedItem.Item.Properties.FirstOrDefault(p => p.Name == "Level")?.Values.FirstOrDefault()?.Value ?? "0";
                    string quality = ListedItem.Item.Properties.FirstOrDefault(p => p.Name == "Quality")?.Values.FirstOrDefault()?.Value ?? "0";

                    <span>@Regex.Match(level, @"\d+") lvl | @Regex.Match(quality, @"\d+")%</span>

                }
                else if (ListedItem.Item.Sockets?.Any() == true)
                {
                    IGrouping<int, Socket>[] socketGroups = ListedItem.Item.Sockets.GroupBy(s => s.Group).OrderByDescending(s => s.Count()).ToArray();

                    @if (socketGroups.Max(s => s.Count()) == 6)
                    {
                        <strong>6S 6L</strong>
                    }
                    else
                    {
                        @(ListedItem.Item.Sockets.Length)@:S&nbsp;@socketGroups.Max(s => s.Count())L&nbsp;
                    }

                    foreach (IGrouping<int, Socket> socketGroup in socketGroups)
                    {
                        <span class="socket">[</span>
                        foreach (Socket socket in socketGroup.ToArray())
                        {
                            <span class="socket socket__@socket.Type.ToString().ToLower()">
                                @socket.Type.ToString()[0]
                            </span>
                        }
                        <span class="socket">]</span>
                    }
                }
            }
        </div>
        <div class="cell" style="width: 20%;">@((DateTime.Now - ListedItem.Listing.Indexed).Hours) h ago</div>
    </div>