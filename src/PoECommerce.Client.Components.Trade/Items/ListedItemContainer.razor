@using PoECommerce.Core.Model.Search
@inherits ListedItemContainerBase

<div class="listed-item-container">
    <div class="listed-item-container-item">
        <div class="icon-wrapper">
            <div class="icon">
                <img src="@ListedItem.Item.Icon" alt="item" />
            </div>
        </div>
    </div>
    <div class="listed-item-container-stats listed-item-container-stats__@ListedItem.Item.ItemType.ToString().ToLower()">
        <div class="item-header">
            @switch (ListedItem.Item.ItemType)
            {
                case ItemType.Normal:
                case ItemType.Magic:
                    <h1>@ListedItem.Item.DisplayName</h1>
                    break;
                case ItemType.Rare:
                case ItemType.Unique:
                    <h1>@ListedItem.Item.Name</h1>
                    <h1>@ListedItem.Item.TypeName</h1>
                    break;
                case ItemType.Gem:
                    <h1>@ListedItem.Item.TypeName</h1>
                    break;
                case ItemType.Currency:
                    <h1>@ListedItem.Item.TypeName</h1>
                    break;
                case ItemType.DivinationCard:
                    <h1>@ListedItem.Item.TypeName</h1>
                    break;
                case ItemType.Prophecy:
                    <h1>@ListedItem.Item.TypeName</h1>
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        </div>

        @if (ListedItem.Item.ItemType == ItemType.Prophecy)
        {
            @if (ListedItem.Item.FlavourText?.Any() == true)
            {
                <div class="item-description text-simple">
                    @foreach (string line in ListedItem.Item.FlavourText)
                    {
                        <span>@line</span>
                    }
                </div>
                <div class="stats-serparator"></div>
            }

            @if (!string.IsNullOrEmpty(ListedItem.Item.ProphecyText))
            {
                <div class="item-description text-description">
                    @(ListedItem.Item.ProphecyText)
                </div>
                <div class="stats-serparator"></div>
            }
        }
        else
        {

            @if (ListedItem.Item.Properties?.Any() == true || ListedItem.Item.UtilityMods != null)
            {
                @if (ListedItem.Item.Properties?.Any() == true)
                {
                    <ItemPropertiesContainer Properties="@ListedItem.Item.Properties"></ItemPropertiesContainer>
                }

                @if (ListedItem.Item.UtilityMods != null)
                {
                    <div class="text-augmented">
                        @foreach (string mod in ListedItem.Item.UtilityMods)
                        {
                            <div class="item-mod">
                                @mod
                            </div>
                        }
                    </div>
                }

                <div class="stats-serparator"></div>
            }

            @if (ListedItem.Item.ItemLevel > 0 || ListedItem.Item.Requirements?.Any() == true)
            {
                @if (ListedItem.Item.ItemLevel > 0)
                {
                    <div>
                        Item Level:
                        <span class="text-simple">
                            @(ListedItem.Item.ItemLevel)
                        </span>
                    </div>
                }
                @if (ListedItem.Item.Requirements?.Any() == true)
                {
                    <ItemPropertiesContainer OneLine="@true" OneLinePrefix="Requires" Properties="@ListedItem.Item.Requirements"></ItemPropertiesContainer>
                }
                <div class="stats-serparator"></div>
            }

            @if (!string.IsNullOrEmpty(ListedItem.Item.Description))
            {

                <div class="item-description text-description">
                    @(ListedItem.Item.Description)
                </div>
                <div class="stats-serparator"></div>
            }

            @if (ListedItem.Item.EnchantMods?.Any() == true)
            {
                <div class="text-enchant">
                    @foreach (string mod in ListedItem.Item.EnchantMods)
                    {
                        <div class="item-mod">
                            @mod
                        </div>
                    }
                </div>
                <div class="stats-serparator"></div>
            }

            @if (ListedItem.Item.ImplicitMods?.Any() == true)
            {
                <div class="text-augmented">
                    @foreach (string mod in ListedItem.Item.ImplicitMods)
                    {
                        <div class="item-mod">
                            @mod
                        </div>
                    }
                </div>
                <div class="stats-serparator"></div>
            }

            @if (ListedItem.Item.ExplicitMods?.Any() == true || ListedItem.Item.FracturedMods?.Any() == true || ListedItem.Item.CraftedMods?.Any() == true || ListedItem.Item.IsCorrupted || !ListedItem.Item.IsIdentified)
            {
                @if (ListedItem.Item.FracturedMods != null)
                {
                    <div class="text-fractured">
                        @foreach (string mod in ListedItem.Item.FracturedMods)
                        {
                            <div class="item-mod">
                                @mod
                            </div>
                        }
                    </div>
                }

                @if (ListedItem.Item.ExplicitMods != null)
                {
                    <div class="text-augmented">
                        @foreach (string mod in ListedItem.Item.ExplicitMods)
                        {
                            <div class="item-mod">
                                @mod
                            </div>
                        }
                    </div>
                }

                @if (ListedItem.Item.CraftedMods?.Any() == true)
                {
                    <div class="text-crafted">
                        @foreach (string mod in ListedItem.Item.CraftedMods)
                        {
                            <div class="item-mod">
                                @mod
                            </div>
                        }
                    </div>
                }

                @if (ListedItem.Item.IsCorrupted)
                {
                    <div class="text-corrupted">
                        <div class="item-mod">
                            Corrupted
                        </div>
                    </div>
                }

                @if (!ListedItem.Item.IsIdentified)
                {
                    <div class="text-unidentified">
                        <div class="item-mod">
                            Unidentified
                        </div>
                    </div>
                }

                <div class="stats-serparator"></div>
            }
        }

        @if (ListedItem.Item.AdditionalProperties?.Any() == true)
        {
            <ItemPropertiesContainer Properties="@ListedItem.Item.AdditionalProperties"></ItemPropertiesContainer>
            <div class="stats-serparator"></div>
        }

        @if (!string.IsNullOrEmpty(ListedItem.Item.Note))
        {
            <div class="text-note">
                @ListedItem.Item.Note
            </div>
        }

        @if (ListedItem.Item.IsVerified)
        {
            <div style="height: 35px;">&nbsp;</div>
            <span class="listed-item-container-stats__verified">Verified</span>
        }
    </div>
    <div class="listed-item-container-listing">
        Id: @ListedItem.ListingId
    </div>
</div>