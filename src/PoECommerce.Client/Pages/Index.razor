@page "/"
@using ElectronNET.API
@using PoECommerce.Client.Shared.Display
@implements IDisposable
@inject IWindowManager WindowManager
<div class="task-bar">
    <Button OnClick="@(async()=>await WindowManager.Show(1))" Value="Trade" ElementType="@ElementType.Primary"></Button>
</div>

<style>
    body {
        background: none;
    }

    .task-bar {
        position: fixed;
        bottom: 0;
        right: 0;
    }

        .task-bar button {
            margin: 5px;
        }
</style>

@functions
{
    [Inject]
    public ITradeState TradeState { get; set; }

    protected override void OnInitialized()
    {
        TradeState.OnIsCompactChanged += TradeStateOnIsCompactChanged;

        if (HybridSupport.IsElectronActive)
        {
            Electron.GlobalShortcut.Register("Ctrl+Alt+Shift+F", async () =>
            {
                await WindowManager.Show(1);
                TradeState.IsCompact = false;
            });

            Electron.GlobalShortcut.Register("Ctrl+Shift+F", async () =>
            {
                await WindowManager.Show(1);
                TradeState.IsCompact = true;
            });

            Electron.GlobalShortcut.Register("Shift+Esc", () => Electron.App.Quit());
        }
    }

    private async void TradeStateOnIsCompactChanged(object sender, bool isCompact)
    {
        TradeState.IsVisible = false;

        if (isCompact)
        {
            await WindowManager.ResizeAndPlaceOnCursor(1, 500, 200);
            TradeState.IsVisible = true;
        }
        else
        {
            await WindowManager.ResizeAndPlaceOnCursor(1, 800, 800);
            TradeState.IsVisible = true;
        }
    }

    public void Dispose()
    {
        TradeState.OnIsCompactChanged -= TradeStateOnIsCompactChanged;
    }
}
