@page "/"
@implements IDisposable
@inject IWindowManager WindowManager
@inject IPathOfExileFacade PathOfExileFacade
@using ElectronNET.API
@using PoECommerce.Client.Shared.Display
@using PoECommerce.Core.Model.Enums
@using PoECommerce.Core.Model.Search
@using PoECommerce.PathOfExile.GameClient.Abstractions
@using PoECommerce.PathOfExile.Models.Trade.Items
@inherits PoECommerce.Client.Pages.Common.ErrorHandlingComponentBase
<div class="task-bar">
    <Button OnClick="@(async () =>
                       {
                           TradeState.IsCompact = false;
                           await WindowManager.Show(1);
                       })" Value="Trade" ElementType="@ElementType.Primary"></Button>
</div>

<style>
    body {
        background: none;
    }

    .task-bar {
        bottom: 0;
        position: fixed;
        right: 0;
    }

    .task-bar button {
        margin: 5px;
    }
</style>

@functions
{

    [Inject]
    public ITradeState TradeState { get; set; }

    protected override void OnInitialized()
    {
        TradeState.OnIsCompactChanged += TradeStateOnIsCompactChanged;

        if (HybridSupport.IsElectronActive)
        {
            Electron.GlobalShortcut.Register("Ctrl+Alt+Shift+F", async () =>
            {
                try
                {
                    TradeState.IsCompact = false;
                    await WindowManager.Show(1);
                }
                catch (Exception ex)
                {
                    OnException(ex);
                }
            });

            Electron.GlobalShortcut.Register("Ctrl+Shift+F", async () =>
            {
                try
                {
                    TradeState.IsCompact = true;
                    await WindowManager.Show(1);
                }
                catch (Exception ex)
                {
                    OnException(ex);
                }
            });

            Electron.GlobalShortcut.Register("Ctrl+Shift+D", async () =>
            {
                try
                {
                    Item item = await PathOfExileFacade.GetItemOnCursor();

                if (item != null)
                {
                    Query query = new Query
                    {
                        TypeFilter = new TypeFilter(),
                        TradeFilter = new TradeFilter
                        {
                            SaleType = SaleType.Priced
                        },
                        WeaponFilter = new WeaponsFilter(),
                        ModifiersFilter = new ModifiersFilter(),
                        ArmourFilter = new ArmoursFilter(),
                        MapsFilter = new MapsFilter(),
                        RequirementsFilter = new RequirementsFilter(),
                        SocketFilter = new SocketsGroupFilter(),
                        MiscellaneousFilter = new MiscellaneousFilter(),
                        Sort = new Dictionary<string, SortType>
                        {
                            {"price", SortType.Ascending}
                        },
                        OnlineStatus = OnlineStatus.Online
                    };

                    if (!query.ModifiersFilter.GroupFilters.Any())
                    {
                        query.ModifiersFilter.GroupFilters.Add(new ModifierGroupFilter());
                    }

                    query.Name = item.Name;
                    query.Type = item.TypeName;
                 
                    TradeState.SearchItems(query);

                    await WindowManager.Show(1);
                    TradeState.IsCompact = true;
                }
                }
                catch (Exception ex)
                {
                    OnException(ex);
                }
            });

            Electron.GlobalShortcut.Register("Shift+Esc", () => Electron.App.Quit());
        }
    }

    private async void TradeStateOnIsCompactChanged(object sender, bool isCompact)
    {
        TradeState.IsVisible = false;

        if (isCompact)
        {
            await WindowManager.ResizeAndPlaceOnCursor(1, 500, 200);
            TradeState.IsVisible = true;
        }
        else
        {
            await WindowManager.ResizeAndPlaceOnCursor(1, 800, 800);
            TradeState.IsVisible = true;
        }
    }

    public void Dispose()
    {
        TradeState.OnIsCompactChanged -= TradeStateOnIsCompactChanged;
    }

}